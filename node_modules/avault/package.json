{
  "name": "avault",
  "version": "0.1.17",
  "description": "Simple module to protect api keys, username credentials, and other sensitive data.",
  "main": "vault.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/apigee-127/avault"
  },
  "keywords": [
    "secure",
    "vault",
    "sensitive"
  ],
  "dependencies": {
    "chalk": "0.4.0",
    "minimist": "0.2.0",
    "node-uuid": "1.4.1",
    "q": "1.0.1"
  },
  "author": {
    "name": "Randy Solton",
    "email": "rsolton@apigee.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/apigee-127/avault/issues"
  },
  "homepage": "https://github.com/apigee-127/avault",
  "readme": "avault\n=========\n\nA small module providing the ability to store sensitive data securely and retrieve it decrypted at runtime.\n\n## Installation\n\n  npm install avault\n\n## Usage\nThere are two steps to follow to use the avault service:\n\n1. First, use the vaultcli.js utility to store sensitive data encrypted in a named vault.  You may create as many vaults as you like.  Each vault contains a string, which would typically be a stringified JSON object.\n2. Then, it can later be retrieved decrypted for use at runtime.\n\nStep 1 is performed very infrequently.  Step 2 is performed frequently, whenever sensitive data (e.g. credentials) needs to be retrieved.\n\n### Create a Vault, Empty All Vaults or Set the Master Secret with Command-line Tool 'vaultcli.js'\n  usage: vaultcli.js  [--version]  [--zap] [--verbose] [--reallyverbose] [--secret=&lt;secretValue&gt;] [--value=&lt;vaultValue&gt;] &lt;vaultName&gt;\n\n  example - create a vault entry:\n\n    node_modules/avault/vaultcli.js --verbose --value='{\"username\": \"mrogers\", \"password\": \"director\", \"host\": \"nsa.rds.amazonaws.com\", \"database\": \"prism\"}' sigad\n\n  example - remove all vaults:\n\n    node_modules/avault/vaultcli.js --zap --verbose\n\n  example - set the master key:\n\n    node_modules/avault/vaultcli.js --secret=skeleton --verbose\n\n### Create a Vault with Code\n    var vault = require('avault').createVault(__dirname);\n    var keyName = 'key1';\n    vault.generateKey(keyName).then(\n        function (keyResponse) {\n            vault.store(keyName, '{\"username\": \"mrogers\", \"password\": \"director\", \"host\": \"nsa.rds.amazonaws.com\", \"database\": \"prism\"}', 'sigad').then(\n                function (storeResponse) {\n                    console.log('Ok', storeResponse);\n                },\n                function (err) {\n                    console.log('Error', err);\n                });\n        },\n        function (err) {\n            console.log('Error', err);\n        });\n\n\n### Retrieve Decrypted Data from a Vault at Runtime\n    var vault = require('avault').createVault(__dirname);\n\n    vault.get('sigad', function (profileString) {\n        var profile = JSON.parse(profileString);\n        console.log(profile);\n    });\n\n## Tests\n\n  npm test\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\nAdd unit tests for any new or changed functionality. Lint and test your code.\n\n## Release History\n\n* 0.1.0 Initial release",
  "readmeFilename": "README.md",
  "_id": "avault@0.1.17",
  "_from": "avault@"
}
